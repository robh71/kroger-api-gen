# coding: utf-8

"""
    Kroger API Reference

    <br> <div style=\"background-color: #ffebb2; padding: 16px; border-radius: .25rem; border: 1px solid #ff8d00; padding: 8px; font-size: 13.5px; padding-right: 12px; padding-left: 12px; padding-top: 14px; padding-bottom: 14px;\"><b>DEPRECATION NOTICE</b> - As of 06/01/2020, the Coupons API is no longer available. Currently, there is no direct replacement for the Coupons API.</div>  # Introduction The following APIs are publicly available to allow new clients to build products,  services, or customer experiences that leverage the unique data, functions, and  applications of Kroger. As a company that strives to empower the developer community  and meet our customers where they are, we are offering these APIs as the first  step to building an ecosystem that promotes speed, simplicity, and security. <br><br> To begin using our Public APIs, see the [Getting Started](https://developer.kroger.com/documentation/consume) documentation.   # Environments  During registration, we require apps to be registered for environments individually. Use one of the following paths based on the environment you selected for your application during the registration process.  | Environment | Path | |-------------|------| |Production | https://api.kroger.com/v1/ | |Certification | https://api-ce.kroger.com/v1/ |  # Authentication  For API authentication, Kroger uses the OAuth2 protocol ([RFC6749](https://tools.ietf.org/html/rfc6749)),  supporting the Authorization Code, Client Credentials, and Refresh Token grant types. If you're unfamiliar  with OAuth2, see our [Understanding OAuth2](https://developer.kroger.com/documentation/consume/guides/understanding-oauth2)  documentation.   <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: APISupport@kroger.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LocationsDepartmentAtLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'department_id': 'str',
        'name': 'str',
        'phone': 'str',
        'hours': 'LocationsDepartmentHours'
    }

    attribute_map = {
        'department_id': 'departmentId',
        'name': 'name',
        'phone': 'phone',
        'hours': 'hours'
    }

    def __init__(self, department_id=None, name=None, phone=None, hours=None):  # noqa: E501
        """LocationsDepartmentAtLocation - a model defined in Swagger"""  # noqa: E501
        self._department_id = None
        self._name = None
        self._phone = None
        self._hours = None
        self.discriminator = None
        if department_id is not None:
            self.department_id = department_id
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if hours is not None:
            self.hours = hours

    @property
    def department_id(self):
        """Gets the department_id of this LocationsDepartmentAtLocation.  # noqa: E501

        The 2-digit department code.  # noqa: E501

        :return: The department_id of this LocationsDepartmentAtLocation.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this LocationsDepartmentAtLocation.

        The 2-digit department code.  # noqa: E501

        :param department_id: The department_id of this LocationsDepartmentAtLocation.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def name(self):
        """Gets the name of this LocationsDepartmentAtLocation.  # noqa: E501

        The name of the department.  # noqa: E501

        :return: The name of this LocationsDepartmentAtLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationsDepartmentAtLocation.

        The name of the department.  # noqa: E501

        :param name: The name of this LocationsDepartmentAtLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this LocationsDepartmentAtLocation.  # noqa: E501

        The phone number of the department.  # noqa: E501

        :return: The phone of this LocationsDepartmentAtLocation.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this LocationsDepartmentAtLocation.

        The phone number of the department.  # noqa: E501

        :param phone: The phone of this LocationsDepartmentAtLocation.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def hours(self):
        """Gets the hours of this LocationsDepartmentAtLocation.  # noqa: E501


        :return: The hours of this LocationsDepartmentAtLocation.  # noqa: E501
        :rtype: LocationsDepartmentHours
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this LocationsDepartmentAtLocation.


        :param hours: The hours of this LocationsDepartmentAtLocation.  # noqa: E501
        :type: LocationsDepartmentHours
        """

        self._hours = hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationsDepartmentAtLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationsDepartmentAtLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
