# coding: utf-8

"""
    Kroger API Reference

    <br> <div style=\"background-color: #ffebb2; padding: 16px; border-radius: .25rem; border: 1px solid #ff8d00; padding: 8px; font-size: 13.5px; padding-right: 12px; padding-left: 12px; padding-top: 14px; padding-bottom: 14px;\"><b>DEPRECATION NOTICE</b> - As of 06/01/2020, the Coupons API is no longer available. Currently, there is no direct replacement for the Coupons API.</div>  # Introduction The following APIs are publicly available to allow new clients to build products,  services, or customer experiences that leverage the unique data, functions, and  applications of Kroger. As a company that strives to empower the developer community  and meet our customers where they are, we are offering these APIs as the first  step to building an ecosystem that promotes speed, simplicity, and security. <br><br> To begin using our Public APIs, see the [Getting Started](https://developer.kroger.com/documentation/consume) documentation.   # Environments  During registration, we require apps to be registered for environments individually. Use one of the following paths based on the environment you selected for your application during the registration process.  | Environment | Path | |-------------|------| |Production | https://api.kroger.com/v1/ | |Certification | https://api-ce.kroger.com/v1/ |  # Authentication  For API authentication, Kroger uses the OAuth2 protocol ([RFC6749](https://tools.ietf.org/html/rfc6749)),  supporting the Authorization Code, Client Credentials, and Refresh Token grant types. If you're unfamiliar  with OAuth2, see our [Understanding OAuth2](https://developer.kroger.com/documentation/consume/guides/understanding-oauth2)  documentation.   <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: APISupport@kroger.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LocationsDepartmentHours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open24': 'bool',
        'monday': 'LocationsDailyHours',
        'tuesday': 'LocationsDailyHours',
        'wednesday': 'LocationsDailyHours',
        'thursday': 'LocationsDailyHours',
        'friday': 'LocationsDailyHours',
        'saturday': 'LocationsDailyHours',
        'sunday': 'LocationsDailyHours'
    }

    attribute_map = {
        'open24': 'Open24',
        'monday': 'monday',
        'tuesday': 'tuesday',
        'wednesday': 'wednesday',
        'thursday': 'thursday',
        'friday': 'friday',
        'saturday': 'saturday',
        'sunday': 'sunday'
    }

    def __init__(self, open24=None, monday=None, tuesday=None, wednesday=None, thursday=None, friday=None, saturday=None, sunday=None):  # noqa: E501
        """LocationsDepartmentHours - a model defined in Swagger"""  # noqa: E501
        self._open24 = None
        self._monday = None
        self._tuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self._sunday = None
        self.discriminator = None
        if open24 is not None:
            self.open24 = open24
        if monday is not None:
            self.monday = monday
        if tuesday is not None:
            self.tuesday = tuesday
        if wednesday is not None:
            self.wednesday = wednesday
        if thursday is not None:
            self.thursday = thursday
        if friday is not None:
            self.friday = friday
        if saturday is not None:
            self.saturday = saturday
        if sunday is not None:
            self.sunday = sunday

    @property
    def open24(self):
        """Gets the open24 of this LocationsDepartmentHours.  # noqa: E501

        Indicates if the department is open 24 hours.  # noqa: E501

        :return: The open24 of this LocationsDepartmentHours.  # noqa: E501
        :rtype: bool
        """
        return self._open24

    @open24.setter
    def open24(self, open24):
        """Sets the open24 of this LocationsDepartmentHours.

        Indicates if the department is open 24 hours.  # noqa: E501

        :param open24: The open24 of this LocationsDepartmentHours.  # noqa: E501
        :type: bool
        """

        self._open24 = open24

    @property
    def monday(self):
        """Gets the monday of this LocationsDepartmentHours.  # noqa: E501


        :return: The monday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this LocationsDepartmentHours.


        :param monday: The monday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._monday = monday

    @property
    def tuesday(self):
        """Gets the tuesday of this LocationsDepartmentHours.  # noqa: E501


        :return: The tuesday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this LocationsDepartmentHours.


        :param tuesday: The tuesday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this LocationsDepartmentHours.  # noqa: E501


        :return: The wednesday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this LocationsDepartmentHours.


        :param wednesday: The wednesday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this LocationsDepartmentHours.  # noqa: E501


        :return: The thursday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this LocationsDepartmentHours.


        :param thursday: The thursday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this LocationsDepartmentHours.  # noqa: E501


        :return: The friday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this LocationsDepartmentHours.


        :param friday: The friday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this LocationsDepartmentHours.  # noqa: E501


        :return: The saturday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this LocationsDepartmentHours.


        :param saturday: The saturday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this LocationsDepartmentHours.  # noqa: E501


        :return: The sunday of this LocationsDepartmentHours.  # noqa: E501
        :rtype: LocationsDailyHours
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this LocationsDepartmentHours.


        :param sunday: The sunday of this LocationsDepartmentHours.  # noqa: E501
        :type: LocationsDailyHours
        """

        self._sunday = sunday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationsDepartmentHours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationsDepartmentHours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
