# coding: utf-8

"""
    Kroger API Reference

    <br> <div style=\"background-color: #ffebb2; padding: 16px; border-radius: .25rem; border: 1px solid #ff8d00; padding: 8px; font-size: 13.5px; padding-right: 12px; padding-left: 12px; padding-top: 14px; padding-bottom: 14px;\"><b>DEPRECATION NOTICE</b> - As of 06/01/2020, the Coupons API is no longer available. Currently, there is no direct replacement for the Coupons API.</div>  # Introduction The following APIs are publicly available to allow new clients to build products,  services, or customer experiences that leverage the unique data, functions, and  applications of Kroger. As a company that strives to empower the developer community  and meet our customers where they are, we are offering these APIs as the first  step to building an ecosystem that promotes speed, simplicity, and security. <br><br> To begin using our Public APIs, see the [Getting Started](https://developer.kroger.com/documentation/consume) documentation.   # Environments  During registration, we require apps to be registered for environments individually. Use one of the following paths based on the environment you selected for your application during the registration process.  | Environment | Path | |-------------|------| |Production | https://api.kroger.com/v1/ | |Certification | https://api-ce.kroger.com/v1/ |  # Authentication  For API authentication, Kroger uses the OAuth2 protocol ([RFC6749](https://tools.ietf.org/html/rfc6749)),  supporting the Authorization Code, Client Credentials, and Refresh Token grant types. If you're unfamiliar  with OAuth2, see our [Understanding OAuth2](https://developer.kroger.com/documentation/consume/guides/understanding-oauth2)  documentation.   <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: APISupport@kroger.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LocationsLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'LocationsAddress',
        'chain': 'str',
        'phone': 'str',
        'departments': 'list[LocationsDepartmentAtLocation]',
        'geolocation': 'LocationsGeoLocation',
        'hours': 'LocationsLocationHours',
        'location_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'address': 'address',
        'chain': 'chain',
        'phone': 'phone',
        'departments': 'departments',
        'geolocation': 'geolocation',
        'hours': 'hours',
        'location_id': 'locationId',
        'name': 'name'
    }

    def __init__(self, address=None, chain=None, phone=None, departments=None, geolocation=None, hours=None, location_id=None, name=None):  # noqa: E501
        """LocationsLocation - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._chain = None
        self._phone = None
        self._departments = None
        self._geolocation = None
        self._hours = None
        self._location_id = None
        self._name = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if chain is not None:
            self.chain = chain
        if phone is not None:
            self.phone = phone
        if departments is not None:
            self.departments = departments
        if geolocation is not None:
            self.geolocation = geolocation
        if hours is not None:
            self.hours = hours
        if location_id is not None:
            self.location_id = location_id
        if name is not None:
            self.name = name

    @property
    def address(self):
        """Gets the address of this LocationsLocation.  # noqa: E501


        :return: The address of this LocationsLocation.  # noqa: E501
        :rtype: LocationsAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LocationsLocation.


        :param address: The address of this LocationsLocation.  # noqa: E501
        :type: LocationsAddress
        """

        self._address = address

    @property
    def chain(self):
        """Gets the chain of this LocationsLocation.  # noqa: E501

        The name of the chain.  # noqa: E501

        :return: The chain of this LocationsLocation.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this LocationsLocation.

        The name of the chain.  # noqa: E501

        :param chain: The chain of this LocationsLocation.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def phone(self):
        """Gets the phone of this LocationsLocation.  # noqa: E501

        The phone number of the location.  # noqa: E501

        :return: The phone of this LocationsLocation.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this LocationsLocation.

        The phone number of the location.  # noqa: E501

        :param phone: The phone of this LocationsLocation.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def departments(self):
        """Gets the departments of this LocationsLocation.  # noqa: E501

        The available departments at the location.  # noqa: E501

        :return: The departments of this LocationsLocation.  # noqa: E501
        :rtype: list[LocationsDepartmentAtLocation]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this LocationsLocation.

        The available departments at the location.  # noqa: E501

        :param departments: The departments of this LocationsLocation.  # noqa: E501
        :type: list[LocationsDepartmentAtLocation]
        """

        self._departments = departments

    @property
    def geolocation(self):
        """Gets the geolocation of this LocationsLocation.  # noqa: E501


        :return: The geolocation of this LocationsLocation.  # noqa: E501
        :rtype: LocationsGeoLocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this LocationsLocation.


        :param geolocation: The geolocation of this LocationsLocation.  # noqa: E501
        :type: LocationsGeoLocation
        """

        self._geolocation = geolocation

    @property
    def hours(self):
        """Gets the hours of this LocationsLocation.  # noqa: E501


        :return: The hours of this LocationsLocation.  # noqa: E501
        :rtype: LocationsLocationHours
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this LocationsLocation.


        :param hours: The hours of this LocationsLocation.  # noqa: E501
        :type: LocationsLocationHours
        """

        self._hours = hours

    @property
    def location_id(self):
        """Gets the location_id of this LocationsLocation.  # noqa: E501

        The 3-digit management division number followed by the 5-digit store number.  # noqa: E501

        :return: The location_id of this LocationsLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this LocationsLocation.

        The 3-digit management division number followed by the 5-digit store number.  # noqa: E501

        :param location_id: The location_id of this LocationsLocation.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this LocationsLocation.  # noqa: E501

        The name of the location. The name generally consists of the chain followed by a vanity name.  # noqa: E501

        :return: The name of this LocationsLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationsLocation.

        The name of the location. The name generally consists of the chain followed by a vanity name.  # noqa: E501

        :param name: The name of this LocationsLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationsLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationsLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
