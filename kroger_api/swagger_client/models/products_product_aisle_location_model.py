# coding: utf-8

"""
    Kroger API Reference

    <br> <div style=\"background-color: #ffebb2; padding: 16px; border-radius: .25rem; border: 1px solid #ff8d00; padding: 8px; font-size: 13.5px; padding-right: 12px; padding-left: 12px; padding-top: 14px; padding-bottom: 14px;\"><b>DEPRECATION NOTICE</b> - As of 06/01/2020, the Coupons API is no longer available. Currently, there is no direct replacement for the Coupons API.</div>  # Introduction The following APIs are publicly available to allow new clients to build products,  services, or customer experiences that leverage the unique data, functions, and  applications of Kroger. As a company that strives to empower the developer community  and meet our customers where they are, we are offering these APIs as the first  step to building an ecosystem that promotes speed, simplicity, and security. <br><br> To begin using our Public APIs, see the [Getting Started](https://developer.kroger.com/documentation/consume) documentation.   # Environments  During registration, we require apps to be registered for environments individually. Use one of the following paths based on the environment you selected for your application during the registration process.  | Environment | Path | |-------------|------| |Production | https://api.kroger.com/v1/ | |Certification | https://api-ce.kroger.com/v1/ |  # Authentication  For API authentication, Kroger uses the OAuth2 protocol ([RFC6749](https://tools.ietf.org/html/rfc6749)),  supporting the Authorization Code, Client Credentials, and Refresh Token grant types. If you're unfamiliar  with OAuth2, see our [Understanding OAuth2](https://developer.kroger.com/documentation/consume/guides/understanding-oauth2)  documentation.   <!-- ReDoc-Inject: <security-definitions> -->   # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: APISupport@kroger.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProductsProductAisleLocationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bay_number': 'str',
        'description': 'str',
        'number': 'str',
        'number_of_facings': 'str',
        'sequence_number': 'str',
        'side': 'str',
        'shelf_number': 'str',
        'shelf_position_in_bay': 'str'
    }

    attribute_map = {
        'bay_number': 'bayNumber',
        'description': 'description',
        'number': 'number',
        'number_of_facings': 'numberOfFacings',
        'sequence_number': 'sequenceNumber',
        'side': 'side',
        'shelf_number': 'shelfNumber',
        'shelf_position_in_bay': 'shelfPositionInBay'
    }

    def __init__(self, bay_number=None, description=None, number=None, number_of_facings=None, sequence_number=None, side=None, shelf_number=None, shelf_position_in_bay=None):  # noqa: E501
        """ProductsProductAisleLocationModel - a model defined in Swagger"""  # noqa: E501
        self._bay_number = None
        self._description = None
        self._number = None
        self._number_of_facings = None
        self._sequence_number = None
        self._side = None
        self._shelf_number = None
        self._shelf_position_in_bay = None
        self.discriminator = None
        if bay_number is not None:
            self.bay_number = bay_number
        if description is not None:
            self.description = description
        if number is not None:
            self.number = number
        if number_of_facings is not None:
            self.number_of_facings = number_of_facings
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if side is not None:
            self.side = side
        if shelf_number is not None:
            self.shelf_number = shelf_number
        if shelf_position_in_bay is not None:
            self.shelf_position_in_bay = shelf_position_in_bay

    @property
    def bay_number(self):
        """Gets the bay_number of this ProductsProductAisleLocationModel.  # noqa: E501

        The bay number in the aisle.  # noqa: E501

        :return: The bay_number of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._bay_number

    @bay_number.setter
    def bay_number(self, bay_number):
        """Sets the bay_number of this ProductsProductAisleLocationModel.

        The bay number in the aisle.  # noqa: E501

        :param bay_number: The bay_number of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._bay_number = bay_number

    @property
    def description(self):
        """Gets the description of this ProductsProductAisleLocationModel.  # noqa: E501

        The location in the store.  # noqa: E501

        :return: The description of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductsProductAisleLocationModel.

        The location in the store.  # noqa: E501

        :param description: The description of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def number(self):
        """Gets the number of this ProductsProductAisleLocationModel.  # noqa: E501

        The aisle number in the store.  # noqa: E501

        :return: The number of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProductsProductAisleLocationModel.

        The aisle number in the store.  # noqa: E501

        :param number: The number of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def number_of_facings(self):
        """Gets the number_of_facings of this ProductsProductAisleLocationModel.  # noqa: E501

        The number of facings.  # noqa: E501

        :return: The number_of_facings of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._number_of_facings

    @number_of_facings.setter
    def number_of_facings(self, number_of_facings):
        """Sets the number_of_facings of this ProductsProductAisleLocationModel.

        The number of facings.  # noqa: E501

        :param number_of_facings: The number_of_facings of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._number_of_facings = number_of_facings

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ProductsProductAisleLocationModel.  # noqa: E501

        The sequence of the aisle in the store.  # noqa: E501

        :return: The sequence_number of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ProductsProductAisleLocationModel.

        The sequence of the aisle in the store.  # noqa: E501

        :param sequence_number: The sequence_number of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._sequence_number = sequence_number

    @property
    def side(self):
        """Gets the side of this ProductsProductAisleLocationModel.  # noqa: E501

        The side of the aisle where the product is located.  # noqa: E501

        :return: The side of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this ProductsProductAisleLocationModel.

        The side of the aisle where the product is located.  # noqa: E501

        :param side: The side of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def shelf_number(self):
        """Gets the shelf_number of this ProductsProductAisleLocationModel.  # noqa: E501

        The shelf number in the aisle.  # noqa: E501

        :return: The shelf_number of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._shelf_number

    @shelf_number.setter
    def shelf_number(self, shelf_number):
        """Sets the shelf_number of this ProductsProductAisleLocationModel.

        The shelf number in the aisle.  # noqa: E501

        :param shelf_number: The shelf_number of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._shelf_number = shelf_number

    @property
    def shelf_position_in_bay(self):
        """Gets the shelf_position_in_bay of this ProductsProductAisleLocationModel.  # noqa: E501

        The position of the shelf in the bay.  # noqa: E501

        :return: The shelf_position_in_bay of this ProductsProductAisleLocationModel.  # noqa: E501
        :rtype: str
        """
        return self._shelf_position_in_bay

    @shelf_position_in_bay.setter
    def shelf_position_in_bay(self, shelf_position_in_bay):
        """Sets the shelf_position_in_bay of this ProductsProductAisleLocationModel.

        The position of the shelf in the bay.  # noqa: E501

        :param shelf_position_in_bay: The shelf_position_in_bay of this ProductsProductAisleLocationModel.  # noqa: E501
        :type: str
        """

        self._shelf_position_in_bay = shelf_position_in_bay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsProductAisleLocationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsProductAisleLocationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
